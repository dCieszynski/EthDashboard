{"version":3,"sources":["components/Header.js","components/TransactionsHistory.js","components/UserInfo.js","components/Dashboard.js","components/Login.js","App.js","index.js"],"names":["Header","className","TransactionsHistory","props","convertTimestamp","timestamp","date","Date","month","getMonth","year","getFullYear","getDate","transactionsHistory","map","tx","i","account","String","from","toLowerCase","to","parseFloat","ethers","utils","formatEther","BigNumber","value","_hex","toFixed","UserInfo","balance","Dashboard","Login","useState","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","connButtonText","setConnButtonText","provider","setProvider","setBalance","setTransactionsHistory","useEffect","getAccountBalance","getAccountTransfers","a","undefined","getBalance","formatBalance","etherscanProvider","providers","EtherscanProvider","getHistory","then","history","console","log","connectWallet","getAccounts","getProvider","Web3Provider","window","ethereum","request","method","accounts","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.579b96e8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1 className='header header--main'> Ether Dashboard</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { ethers } from 'ethers';\nimport { BigNumber } from 'ethers';\n\nconst TransactionsHistory = (props) => {\n  const convertTimestamp = (timestamp) => {\n    let date = new Date(timestamp * 1000);\n    let month = date.getMonth();\n    let year = date.getFullYear();\n    let day = date.getDate();\n    let formettedTime = day + '.' + month + '.' + year;\n    return formettedTime;\n  };\n\n  return (\n    <div className='transactionsHistory'>\n      <h2 className='header header-transactionsHistory'>\n        Transactions History\n      </h2>\n      <div className='table'>\n        <div className='table-content'>\n          <div className='table__col'>\n            <h3 className='header header--table'>Date</h3>\n            {props.transactionsHistory.map((tx, i) => {\n              return (\n                <div className='table-row' key={i}>\n                  {convertTimestamp(tx.timestamp)}\n                </div>\n              );\n            })}\n          </div>\n          <div className='table__col'>\n            <h3 className='header header--table'>From address</h3>\n            {props.transactionsHistory.map((tx, i) => {\n              return (\n                <div\n                  className={\n                    'table-row' +\n                    ' ' +\n                    (props.account === String(tx.from).toLowerCase()\n                      ? 'account-address'\n                      : '')\n                  }\n                  key={i}\n                >\n                  {String(tx.from).toLowerCase()}\n                </div>\n              );\n            })}\n          </div>\n          <div className='table__col'>\n            <h3 className='header header--table'>To address</h3>\n            {props.transactionsHistory.map((tx, i) => {\n              return (\n                <div\n                  className={\n                    'table-row' +\n                    ' ' +\n                    (props.account === String(tx.to).toLowerCase()\n                      ? 'account-address'\n                      : '')\n                  }\n                  key={i}\n                >\n                  {String(tx.to).toLowerCase()}\n                </div>\n              );\n            })}\n          </div>\n          <div className='table__col'>\n            <h3 className='header header--table'>Value</h3>\n            {props.transactionsHistory.map((tx, i) => {\n              return (\n                <div className='table-row' key={i}>\n                  {parseFloat(\n                    ethers.utils.formatEther(BigNumber.from(tx.value._hex))\n                  ).toFixed(4)}{' '}\n                  ETH\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionsHistory;\n","import React from 'react';\n\nconst UserInfo = (props) => {\n  return (\n    <div className='userInfo'>\n      <h2 className='header header--dashboard account-address'>\n        User account: {props.account}\n      </h2>\n      <h2 className='header header--dashboard'>Balance: {props.balance} ETH</h2>\n    </div>\n  );\n};\n\nexport default UserInfo;\n","import React from 'react';\nimport TransactionsHistory from './TransactionsHistory';\nimport UserInfo from './UserInfo';\n\nconst Dashboard = (props) => {\n  return (\n    <div className='dashboard'>\n      <UserInfo account={props.account} balance={props.balance} />\n      <TransactionsHistory\n        account={props.account}\n        transactionsHistory={props.transactionsHistory}\n      />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Dashboard from './Dashboard';\n\nconst Login = () => {\n  const [errorMessage, setErrorMessage] = useState();\n  const [defaultAccount, setDefaultAccount] = useState();\n  const [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n  const [provider, setProvider] = useState();\n  const [balance, setBalance] = useState();\n  const [transactionsHistory, setTransactionsHistory] = useState([]);\n\n  //Get data when provider change\n  useEffect(() => {\n    getAccountBalance();\n    getAccountTransfers();\n  }, [provider]);\n\n  //Get ballance of provider address\n  const getAccountBalance = async () => {\n    if (provider !== undefined) {\n      const balance = await provider.getBalance(defaultAccount);\n      const formatBalance = await ethers.utils.formatEther(balance);\n      setBalance(parseFloat(formatBalance).toFixed(4));\n    }\n  };\n\n  //Get history of address transactions\n  const getAccountTransfers = async () => {\n    if (defaultAccount !== undefined) {\n      let network = 'ropsten';\n      let etherscanProvider = new ethers.providers.EtherscanProvider(network);\n      await etherscanProvider.getHistory(defaultAccount).then((history) => {\n        setTransactionsHistory(history);\n        console.log(history);\n      });\n    }\n  };\n\n  //Connecting MetaMask\n  const connectWallet = async () => {\n    //Get list of provider accounts\n    const getAccounts = async () => {\n      //Getting and setting new provider\n      const getProvider = async () => {\n        const provider = await new ethers.providers.Web3Provider(\n          window.ethereum\n        );\n        setProvider(provider);\n      };\n      //Getting list of provider's accounts\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      //Setting provider and default account\n      setDefaultAccount(accounts[0]);\n      setConnButtonText('Wallet connected');\n      getProvider();\n    };\n\n    //Checking if MetaMask is installed, if it is connect accounts, if not display error\n    if (window.ethereum) {\n      getAccounts();\n    } else {\n      setErrorMessage('Need to install MetaMask!');\n    }\n  };\n\n  return (\n    <div className='container container--login'>\n      <button className='btn btn--login' onClick={connectWallet}>\n        {connButtonText}\n      </button>\n      <Dashboard\n        account={defaultAccount}\n        balance={balance}\n        transactionsHistory={transactionsHistory}\n      />\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default Login;\n","import './App.css';\nimport Header from './components/Header';\nimport Login from './components/Login';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <Login />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}